section .data
  text1 db "Enter num1: "
  text1Len equ $-text1
  text2 db 10 , "Enter num2: "
  text2Len equ $-text2
  resultText db 10, "Result: "
  resultTextLen equ $-resultText

section .bss
  num1 resb 2
  num2 resb 2
  result resb 1
  remainder resb 1

section .text
  global _start
  
_start:
  
  call getNum1
  call getNum2
  
  mov eax, [num1]
  mov ebx, [num2]
  sub eax, '0'
  sub ebx, '0'
  add eax, ebx
  add eax, '0'
  mov [result], eax
  
  mov eax, 4
  mov ebx, 1
  mov ecx, resultText
  mov edx, resultTextLen
  int 80h
  
  call check

  mov eax, 1
  mov ebx, 0
  int 80h
  
getNum1:
  mov eax, 4
  mov ebx, 1
  mov ecx, text1
  mov edx, text1Len
  int 80h
  
  mov eax, 3
  mov ebx, 0
  mov ecx, num1
  mov edx, 2
  int 80h
  
  ret
  
getNum2:
  mov eax, 4
  mov ebx, 1
  mov ecx, text2
  mov edx, text2Len
  int 80h
  
  mov eax, 3
  mov ebx, 0
  mov ecx, num2
  mov edx, 2  
  int 80h
  
  ret
  
getRemainder:

  mov al, [result]

  sub al, '0'

  mov ebx, 10    
  xor edx, edx  ;clear edx register
  div ebx       ;divide eax by ebx, quotient will be stored on eax register, remainder will be stored on edx register

  add al, '0'

  mov [result], al

  add dl, '0'
  mov [remainder], dl

  mov eax, 4
  mov ebx, 1
  mov ecx, result
  mov edx, 1
  int 80h
  
  
  mov eax, [remainder]
  mov [result], eax
  
check:
  cmp byte [result], '9'  ;Compare ASCII val of result and '9' 
  jg getRemainder         ;jump to getRemainder if ASCII val of result is greater than '9'
  
  mov eax, 4
  mov ebx, 1
  mov ecx, result
  mov edx, 1
  int 80h
  
  ret
